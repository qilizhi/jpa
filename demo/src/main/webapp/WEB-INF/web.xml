<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_1.xsd">
	<display-name>Archetype Created Web Application</display-name>
	<!-- Context 配置 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath*:/applicationContext.xml
		</param-value>

	</context-param>

	<!-- 页面URL字符编码 start -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter
		</filter-class>
		<!-- <async-supported>true</async-supported> -->
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 在Java Web项目中使用Hibernate经常会遇到LazyInitializationException。这是因为controller和model层（java代码）将通过JPA的一些启用了延迟加载功能的领域（如用getRefrence()方法或者在关联关系中采用fetch=FetchType.LAZY）返回给view层（jsp代码）的时候，由于加载领域对象的JPA 
		Session已经关闭，导致这些延迟加载的数据访问异常。 这时就可以使用OpenEntityManagerInViewFilter来将一个JPAsession与一次完整的请求过程对应的线程相绑定 -->
	<!-- <filter>
		<filter-name>OpenEntityManagerInViewFilter</filter-name>
		<filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter
		</filter-class>
		<init-param>
			<param-name>entityManagerFactoryBeanName</param-name>
			<param-value>entityManagerFactory</param-value>
		</init-param>
		<init-param> <param-name>persistenceUnitName</param-name> <param-value>demo</param-value> 
			</init-param>
		<async-supported>true</async-supported>
	</filter>
	org.springframework.orm.hibernate5.support.OpenSessionInViewInterceptor
	<filter-mapping>
		<filter-name>
			OpenEntityManagerInViewFilter
		</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
 -->


	<!-- 页面字符编码 end -->
	<!-- 装饰器 start -->
	<filter>
		<filter-name>sitemesh</filter-name>
		<filter-class>com.opensymphony.module.sitemesh.filter.PageFilter
		</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>sitemesh</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>
	<!-- 装饰器 end -->
	<!-- 配置log4j监听器 start -->
	<!-- Spring刷新Log4j配置文件变动的间隔,单位为毫秒 -->

	<context-param>

		<param-name>log4jRefreshInterval</param-name>

		<param-value>10000</param-value>

	</context-param>

	<listener>

		<listener-class>org.springframework.web.util.Log4jConfigListener
		</listener-class>

	</listener>
	<!-- 配置log4j监听器 end -->

	<!-- Spring监听器 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>
	<!-- 防止Spring内存溢出监听器 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener
		</listener-class>
	</listener>


	<!-- 配置 Spring MVC servlet start -->
	<servlet>
		<servlet-name>SpringMVC</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>


	<servlet-mapping>
		<servlet-name>SpringMVC</servlet-name>
		<!-- 此处可以可以配置成*.do，对应struts的后缀习惯 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.css</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.js</url-pattern>
	</servlet-mapping>
	<!-- 字体 -->
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.eot</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.svg</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.ttf</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.woff</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.woff2</url-pattern>
	</servlet-mapping>
	<!-- 字体 end -->
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.jpg</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.gif</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.png</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.html</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.swf</url-pattern>
	</servlet-mapping>
	<welcome-file-list>
		<welcome-file>/index.jsp</welcome-file>
	</welcome-file-list>

	<!-- Spring mvc end -->

	<!-- 错误 页面配置 -->
	<error-page>
		<exception-type>java.lang.Throwable</exception-type>
		<location>/jsp/error/500.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/jsp/error/500.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/jsp/error/404.jsp</location>
	</error-page>
	<error-page>
		<error-code>403</error-code>
		<location>/jsp/error/403.jsp</location>
	</error-page>


</web-app>
